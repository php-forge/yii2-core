<?php

declare(strict_types=1);

namespace yiiunit\framework\db\oci\schema;

use Exception;
use yii\db\Connection;
use yiiunit\support\OciConnection;

/**
 * @group db
 * @group oci
 * @group schema
 * @group tableschema
 */
final class TableSchemaTest extends \yiiunit\TestCase
{
    private Connection|null $db = null;

    protected function setUp(): void
    {
        parent::setUp();

        $this->db = OciConnection::getConnection();
    }

    public function testAutoIncrement(): void
    {
        $tableName = 'T_autoincrement';

        if ($this->db->hasTable($tableName)) {
            $result = $this->db->createCommand()->dropTable($tableName)->execute();

            $this->assertSame(0, $result);
        }

        $result = $this->db->createCommand()->createTable(
            $tableName,
            [
                'id' => 'NUMBER(10) GENERATED BY DEFAULT AS IDENTITY NOT NULL',
                'name' => 'VARCHAR(128)',
            ],
        )->execute();

        $this->assertSame(0, $result);

        $tableSchema = $this->db->getTableSchema($tableName);

        $this->assertNotNull($tableSchema);

        $this->assertEmpty($tableSchema->primaryKey);
        $this->assertStringContainsString('ISEQ$$', $tableSchema->sequenceName);

        $result = $this->db->createCommand()->dropTable($tableName)->execute();

        $this->assertSame(0, $result);
    }

    public function testAutoIncrementWithMultipleKeys(): void
    {
        $tableName = 'T_autoincrement_with_multiple_keys';

        if ($this->db->hasTable($tableName)) {
            $result = $this->db->createCommand()->dropTable($tableName)->execute();

            $this->assertSame(0, $result);
        }

        $this->expectException(Exception::class);

        $this->db->createCommand()->createTable(
            $tableName,
            [
                'id1' => 'NUMBER(10) GENERATED BY DEFAULT AS IDENTITY NOT NULL',
                'id2' => 'NUMBER(10) GENERATED BY DEFAULT AS IDENTITY NOT NULL',
                'name' => 'VARCHAR(128)',
            ],
        )->execute();
    }

    public function testAutoIncrementWithPrimaryKey(): void
    {
        $tableName = 'T_autoincrement_with_pk';

        if ($this->db->hasTable($tableName)) {
            $result = $this->db->createCommand()->dropTable($tableName)->execute();

            $this->assertSame(0, $result);
        }

        $result = $this->db->createCommand()->createTable(
            $tableName,
            [
                'id' => 'NUMBER(10) GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY',
                'name' => 'VARCHAR(128)',
            ],
        )->execute();

        $this->assertSame(0, $result);

        $tableSchema = $this->db->getTableSchema($tableName);

        $this->assertNotNull($tableSchema);

        $this->assertSame(['id'], $tableSchema->primaryKey);
        $this->assertStringContainsString('ISEQ$$', $tableSchema->sequenceName);

        $result = $this->db->createCommand()->dropTable($tableName)->execute();

        $this->assertSame(0, $result);
    }

    public function testAutoIncrementWithPrimaryKeyComposite(): void
    {
        $tableName = 'T_autoincrement_with_pk_composite';

        if ($this->db->hasTable($tableName)) {
            $result = $this->db->createCommand()->dropTable($tableName)->execute();

            $this->assertSame(0, $result);
        }

        $result = $this->db->createCommand()->createTable(
            $tableName,
            [
                'id1' => 'NUMBER(10) GENERATED BY DEFAULT AS IDENTITY NOT NULL',
                'id2' => 'NUMBER(10) NOT NULL',
                'name' => 'VARCHAR(128)',
                'PRIMARY KEY ([[id1]], [[id2]])',
            ],
        )->execute();

        $this->assertSame(0, $result);

        $tableSchema = $this->db->getTableSchema($tableName);

        $this->assertNotNull($tableSchema);

        $this->assertSame(['id1', 'id2'], $tableSchema->primaryKey);
        $this->assertStringContainsString('ISEQ$$', $tableSchema->sequenceName);

        $result = $this->db->createCommand()->dropTable($tableName)->execute();

        $this->assertSame(0, $result);
    }
}
